var express     = require("express");
var app         = express();
var nodemailer  = require('nodemailer');
var MemoryStore = require('connect').session.MemoryStore;
var dbPath      = 'mongodb://localhost/nodebackbone2';
// var dbPath      = 'mongodb://vinit:wordpass@linus.mongohq.com:10004/nodebackbone1';

// Import the data layer
var mongoose = require('mongoose');
var config = {
  mail: require('./config/mail')
};

// Import the models
var models = {
  Account: require('./models/Account')(config, mongoose, nodemailer),
  LaunchListAccount: require('./models/LaunchListAccount')(config, mongoose),
  PublicReviews: require('./models/PublicReviews')(config, mongoose)
};

function validateEmail(email) { 
    var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
} 

app.configure(function(){
  app.set('view engine', 'jade');
  app.use(express.static(__dirname + '/public'));
  app.use(express.limit('1mb'));
  app.use(express.bodyParser());
  app.use(express.cookieParser());
  app.use(express.session({
    secret: "SocialNet secret key",
    store: new MemoryStore()
  }));
  mongoose.connect(dbPath, function onMongooseError(err) {
    if (err)  {
      console.log(err);
      throw err;
    }
  });
});

app.get('/', function(req, res){
  res.render('index.jade');
});

// submiting email is the on landing page to get notification of the launch
app.post('/landing', function (req, res) {
  console.log('email posted');
  var email = req.param('email', null);
  
  var ip = req.headers['X-Forwarded-For']; // gives the correct result if proxy is used.
  if (!ip)
    var ip = req.connection.remoteAddress;  // if 'X-Forwarded-For' request header is not there.

  if (null == email || email.length < 1 || validateEmail(email) == false) {
    res.send(400);
    return;
  }

  models.LaunchListAccount.launchListAccountSubmit(email, ip, function(err){
    if (err){
      // console.log("Something is not right " + err);
      if (err.code){
        res.send(err.code);
      }
      else{
        // #TODO plun in a notification system to ping developers about the problem. 
        res.send(500);
      }
    } else {
      console.log('Email is registered for Launch List.');
      res.send(200);
    }
  });

});

app.post('/login', function(req, res) {
  console.log('login request');
  var email = req.param('email', null);
  var password = req.param('password', null);

  if ( null == email || email.length < 1
      || null == password || password.length < 1 ) {
    res.send(400);
    return;
  }

  models.Account.login(email, password, function(account) {
    if ( !account ) {
      res.send(401);
      return;
    }
    console.log('login was successful');
    req.session.loggedIn = true;
    req.session.accountId = account._id;
    res.send(200);
  });
});

app.post('/logout', function(req, res) {
  console.log('logout request');

  req.session.accountId = null;
  req.session.loggedIn = false;
  res.send(200);
});

app.post('/register', function(req, res) {
  var firstName = req.param('firstName', '');
  var lastName = req.param('lastName', '');
  var email = req.param('email', null);
  var password = req.param('password', null);

  if ( null == email || email.length < 1
       || null == password || password.length < 1 ) {
    res.send(400);
    return;
  }

  var hostname = req.headers.host;
  var verificationUrl = 'http://' + hostname + '/verify';

  models.Account.register(email, password, firstName, lastName, verificationUrl, function(err){
    if (err){
      // console.log("Something is not right " + err);
      if (err.code)
        res.send(err.code);
      else
        res.send(500);
    } else {
      console.log('Account was created');
      res.send(200);
    }
  });
  
});

app.get('/account/authenticated', function(req, res) {
  if ( req.session.loggedIn ) {
    res.send(200);
  } else {
    res.send(401);
  }
});

function timestamp_comparator(a, b) {

}

app.get('/accounts/me/reviews', function(req, res) {
  // var accountId = req.params.id == 'me' ? req.session.accountId : req.params.id;
  var accountId = req.session.accountId;

  models.Account.findById(accountId, function(account) {
    if (!account) {
      res.send(400);
    } else {
      res.send(account.reviews);
      // if (req.params.id == 'me') {
      //   // var all_reviews = account.reviews.concat(account.anonReviews);
      //   var all_reviews = account.reviews;

      //   var all_sorted_reviews = all_reviews;
      //   // var all_sorted_reviews = all_reviews.sort(timestamp_comparator);
        
      //   res.send(all_sorted_reviews) // if id is "me" show all the reviews, public and anonymous
      // } else {
      //   res.send(account.reviews); // show only public reviews of the user
      // }
    }
  });
});

function expandReviews(docs, callback) {
  // console.log("expandReviews called");
  res = [];
  pushed = 0;
  // console.log(docs);

  for (var i=0; i < docs.length; ++i){
    // console.log(pushed);
    accountId = docs[i]["accountId"];
    reviewId = docs[i]["reviewId"];

    (function(reviewId) {
      models.Account.findById(accountId, function(account) {
        if (account) {
          // console.log("found account");
          for (var r = 0; r < account.reviews.length; ++r) {
            // console.log("=="+account.reviews[r]._id+"==");
            // console.log("=="+reviewId+"==");
            // console.log("");

            // console.log("=="+typeof(account.reviews[r]._id)+"==");
            // console.log("=="+typeof(reviewId)+"==");
            // console.log("");
            // console.log("$$$$$"); 
            // console.log(r);
            // console.log("$$$$$");
            if (account.reviews[r]._id.toString() == reviewId.toString()){
              // console.log("got the review");
              // console.log(account.reviews[r]);
              res.push(account.reviews[r]);
              ++pushed;
              // console.log(pushed);
              // console.log(r);
              if (pushed == docs.length){
                // console.log(res);
                callback(res);
              }
              break;
            }
          }
        }
      });
    })(reviewId);
  }
}

// get all the public reviews posted by people, along with their first name and all anon reviews with name = anon
// send back the latest 50 reviews posted on the system
app.post('/reviews/all', function(req, res) {
  // var accountId = req.session.accountId;

  skip_count = parseInt(req.param('skip'));
  anchor_count = parseInt(req.param('anchor'));
  response = {};
  
  if (anchor_count == 0){
    models.PublicReviews.PublicReviews.count(function(err, currCount){
      anchor_count = currCount;
      models.PublicReviews.getNextPage(skip_count, anchor_count, 10, function(err, results) {
        if (err){
          res.send(400);
        }
        // console.log(results);
        response.skip = skip_count + results.length;
        response.anchor = anchor_count;
        expandReviews(results, function(expandedResults){
          response.results = expandedResults;
          res.send(response);
        });
      });
    });
  } else {
    models.PublicReviews.getNextPage(skip_count, anchor_count, 10, function(err, results) {
      if (err){
        console.log("[VIN_ERROR]=> Error in getNextPage()")
        res.send(200);
      }
      response.skip = skip_count + results.length;
      response.anchor = anchor_count;
      expandReviews(results, function(expandedResults){
        response.results = expandedResults;
        res.send(response);
      });
    });
  }
});

app.post('/accounts/me/reviews', function(req, res) {
  // var accountId = req.params.id == 'me'
  //                    ? req.session.accountId
  //                    : req.params.id;
  var accountId = req.session.accountId;
  // console.log("---------------------------");
  // console.log(accountId);
  // console.log(typeof(accountId));
  // console.log("---------------------------");
  models.Account.findById(accountId, function(account) {
    if (!account) {
      res.send(400);
    } else {
      review = {
        _id: mongoose.Types.ObjectId(),
        reviewText:   req.param('reviewText'),
        vendor:       req.param('vendor'),
        pscategory:   req.param('pscategory'),
        anonymous:    req.param('anonymous'),
        otd_rating:   parseInt(req.param('otd_rating')),
        pad_rating:   parseInt(req.param('pad_rating')),
        pri_rating:   parseInt(req.param('pri_rating')),
        pro_rating:   parseInt(req.param('pro_rating')),
        eos_rating:   parseInt(req.param('eos_rating')),
        rrp_rating:   parseInt(req.param('rrp_rating')),
        csu_rating:   parseInt(req.param('csu_rating')),
        all_rating:   req.param('all_rating'),
        otd_comment:  req.param('otd_comment'),
        pad_comment:  req.param('pad_comment'),
        pri_comment:  req.param('pri_comment'),
        pro_comment:  req.param('pro_comment'),
        eos_comment:  req.param('eos_comment'),
        rrp_comment:  req.param('rrp_comment'),
        csu_comment:  req.param('csu_comment')
      };
      console.log(JSON.stringify(review));
      account.reviews.push(review);
      // console.log("@@#########")
      // console.log(typeof(account.reviews));
      
      // if (req.param('anonymous') === "on")
      //   account.anonReviews.push(review);
      // else
      //   account.reviews.push(review);

      // Push the status to all friends
      // account.activity.push(status);
      account.save(function (err, doc) {
        if (err) {
          console.log('[VIN_ERROR]=> Error saving account: ' + err);
        }
          console.log('[VIN_DEBUG]=> Saved review with review id: ' + review._id);
          models.PublicReviews.addEntry(accountId, review._id, function(err, res){
            console.log(res);
          });
          console.log("=====================================================");
          // // console.log(account.reviews.find({_id:review._id}));
          console.log(account.reviews.length);
          for (var r = 0; r < account.reviews.length; ++r) {
            // console.log("#########")
            if (account.reviews[r]._id == review._id){
              console.log("got the review");
              console.log(account.reviews[r]);
            }
            // console.log("#########")
            // break;
          }
      });
      res.send(200);
  }
  });
});

app.get('/accounts/me', function(req, res) {
  // var accountId = req.params.id == 'me'
  //                    ? req.session.accountId
  //                    : req.params.id;
  var accountId = req.session.accountId;
  models.Account.findById(accountId, function(account) {
    if (account)
      res.send(account);
    else
      res.send(400);
  });
});


app.post('/forgotpassword', function(req, res) {
  var hostname = req.headers.host;
  var resetPasswordUrl = 'http://' + hostname + '/resetPassword';
  var email = req.param('email', null);
  if ( null == email || email.length < 1 ) {
    res.send(400);
    return;
  }

  models.Account.forgotPassword(email, resetPasswordUrl, function(success){
    // if (success) {
    //   res.send(200);
    // } else {
    //   // Username or password not found
    //   res.send(404);
    // }
    res.send(200);
  });
});

app.get('/verify', function(req, res) {
  var accountId = req.param('account', null);
  
  models.Account.findById(accountId, function(account) {
    if (account){
      // set verified variable for the account to be true
      account.verified = true;
      account.save(function(err, doc){
        if (doc)
          console.log("account verification completed for: "+doc._id);
      });
      res.render('accountActivationSuccess.jade');
    } else {
      res.send(400);
    }
  });
});

app.get('/resetPassword', function(req, res) {
  var accountId = req.param('account', null);
  // console.log(accountId);
  res.render('resetPassword.jade', {locals:{accountId:accountId}});
});

app.post('/resetPassword', function(req, res) {
  var accountId = req.param('accountId', null);
  var password = req.param('password', null);
  var re_password = req.param('re-password', null);
  if ( null != accountId && null != password && password == re_password) {
    models.Account.changePassword(accountId, password);
  }
  res.render('resetPasswordSuccess.jade');
});


app.listen(process.env.PORT || 8080);
console.log("ZorSay listening on port process.env.PORT or else 8080.");
